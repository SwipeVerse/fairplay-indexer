[
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "player_addr",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "string",
        "name": "name",
        "type": "string"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "dob",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "enum Fairplay.Gender",
        "name": "gender",
        "type": "uint8"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "location",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "string",
        "name": "uri",
        "type": "string"
      }
    ],
    "name": "AddUser",
    "type": "event"
  },
  {
    "inputs": [
      { "internalType": "string", "name": "name", "type": "string" },
      { "internalType": "uint256", "name": "dob", "type": "uint256" },
      {
        "internalType": "enum Fairplay.Gender",
        "name": "gender",
        "type": "uint8"
      },
      { "internalType": "uint256", "name": "last_location", "type": "uint256" }
    ],
    "name": "addUser",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      { "internalType": "uint256", "name": "search_radius", "type": "uint256" }
    ],
    "name": "generateMatchPool",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      { "internalType": "address", "name": "addr", "type": "address" }
    ],
    "name": "getLastLocation",
    "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getMatchPool",
    "outputs": [
      { "internalType": "address[]", "name": "", "type": "address[]" }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getUser",
    "outputs": [
      {
        "components": [
          { "internalType": "address", "name": "addr", "type": "address" },
          { "internalType": "string", "name": "name", "type": "string" },
          { "internalType": "uint256", "name": "dob", "type": "uint256" },
          {
            "internalType": "enum Fairplay.Gender",
            "name": "gender",
            "type": "uint8"
          },
          {
            "internalType": "uint256",
            "name": "last_location",
            "type": "uint256"
          },
          { "internalType": "string", "name": "uri", "type": "string" }
        ],
        "internalType": "struct Fairplay.player",
        "name": "",
        "type": "tuple"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
    "name": "is_added",
    "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      { "internalType": "address", "name": "", "type": "address" },
      { "internalType": "uint256", "name": "", "type": "uint256" }
    ],
    "name": "match_pool_users",
    "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [{ "internalType": "address", "name": "", "type": "address" }],
    "name": "users",
    "outputs": [
      { "internalType": "address", "name": "addr", "type": "address" },
      { "internalType": "string", "name": "name", "type": "string" },
      { "internalType": "uint256", "name": "dob", "type": "uint256" },
      {
        "internalType": "enum Fairplay.Gender",
        "name": "gender",
        "type": "uint8"
      },
      { "internalType": "uint256", "name": "last_location", "type": "uint256" },
      { "internalType": "string", "name": "uri", "type": "string" }
    ],
    "stateMutability": "view",
    "type": "function"
  }
]
