// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddUser extends ethereum.Event {
  get params(): AddUser__Params {
    return new AddUser__Params(this);
  }
}

export class AddUser__Params {
  _event: AddUser;

  constructor(event: AddUser) {
    this._event = event;
  }

  get player_addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get dob(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get gender(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get location(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class fairplay__getUserResultValue0Struct extends ethereum.Tuple {
  get addr(): Address {
    return this[0].toAddress();
  }

  get name(): string {
    return this[1].toString();
  }

  get dob(): BigInt {
    return this[2].toBigInt();
  }

  get gender(): i32 {
    return this[3].toI32();
  }

  get last_location(): BigInt {
    return this[4].toBigInt();
  }

  get uri(): string {
    return this[5].toString();
  }
}

export class fairplay__usersResult {
  value0: Address;
  value1: string;
  value2: BigInt;
  value3: i32;
  value4: BigInt;
  value5: string;

  constructor(
    value0: Address,
    value1: string,
    value2: BigInt,
    value3: i32,
    value4: BigInt,
    value5: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    return map;
  }

  getAddr(): Address {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getDob(): BigInt {
    return this.value2;
  }

  getGender(): i32 {
    return this.value3;
  }

  getLast_location(): BigInt {
    return this.value4;
  }

  getUri(): string {
    return this.value5;
  }
}

export class fairplay extends ethereum.SmartContract {
  static bind(address: Address): fairplay {
    return new fairplay("fairplay", address);
  }

  getLastLocation(addr: Address): BigInt {
    let result = super.call(
      "getLastLocation",
      "getLastLocation(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigInt();
  }

  try_getLastLocation(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastLocation",
      "getLastLocation(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMatchPool(): Array<Address> {
    let result = super.call("getMatchPool", "getMatchPool():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getMatchPool(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getMatchPool",
      "getMatchPool():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getUser(): fairplay__getUserResultValue0Struct {
    let result = super.call(
      "getUser",
      "getUser():((address,string,uint256,uint8,uint256,string))",
      []
    );

    return changetype<fairplay__getUserResultValue0Struct>(result[0].toTuple());
  }

  try_getUser(): ethereum.CallResult<fairplay__getUserResultValue0Struct> {
    let result = super.tryCall(
      "getUser",
      "getUser():((address,string,uint256,uint8,uint256,string))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<fairplay__getUserResultValue0Struct>(value[0].toTuple())
    );
  }

  is_added(param0: Address): boolean {
    let result = super.call("is_added", "is_added(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_is_added(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("is_added", "is_added(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  match_pool_users(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "match_pool_users",
      "match_pool_users(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_match_pool_users(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "match_pool_users",
      "match_pool_users(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  users(param0: Address): fairplay__usersResult {
    let result = super.call(
      "users",
      "users(address):(address,string,uint256,uint8,uint256,string)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new fairplay__usersResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toBigInt(),
      result[5].toString()
    );
  }

  try_users(param0: Address): ethereum.CallResult<fairplay__usersResult> {
    let result = super.tryCall(
      "users",
      "users(address):(address,string,uint256,uint8,uint256,string)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new fairplay__usersResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toBigInt(),
        value[5].toString()
      )
    );
  }
}

export class AddUserCall extends ethereum.Call {
  get inputs(): AddUserCall__Inputs {
    return new AddUserCall__Inputs(this);
  }

  get outputs(): AddUserCall__Outputs {
    return new AddUserCall__Outputs(this);
  }
}

export class AddUserCall__Inputs {
  _call: AddUserCall;

  constructor(call: AddUserCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get dob(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get gender(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get last_location(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddUserCall__Outputs {
  _call: AddUserCall;

  constructor(call: AddUserCall) {
    this._call = call;
  }
}

export class GenerateMatchPoolCall extends ethereum.Call {
  get inputs(): GenerateMatchPoolCall__Inputs {
    return new GenerateMatchPoolCall__Inputs(this);
  }

  get outputs(): GenerateMatchPoolCall__Outputs {
    return new GenerateMatchPoolCall__Outputs(this);
  }
}

export class GenerateMatchPoolCall__Inputs {
  _call: GenerateMatchPoolCall;

  constructor(call: GenerateMatchPoolCall) {
    this._call = call;
  }

  get search_radius(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GenerateMatchPoolCall__Outputs {
  _call: GenerateMatchPoolCall;

  constructor(call: GenerateMatchPoolCall) {
    this._call = call;
  }
}
